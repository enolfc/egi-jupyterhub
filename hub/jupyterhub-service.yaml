---
  kind: ClusterRole
  apiVersion: rbac.authorization.k8s.io/v1beta1
  metadata:
    name: jupyterhub-role
  rules:
    - apiGroups:
        - ""
      resources:
        - pods
        - services
        - endpoints
      verbs:
        - get
        - list
        - watch
        - create
        - delete
---
  apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: jupyterhub-account
    namespace: jupyterhub
---
  kind: ClusterRoleBinding
  apiVersion: rbac.authorization.k8s.io/v1beta1
  metadata:
    name: jupyterhub
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: jupyterhub-role
  subjects:
  - kind: ServiceAccount
    name: jupyterhub-account
    namespace: jupyterhub
---
---
  apiVersion: v1
  kind: ConfigMap
  metadata:
    name: jupyterhub-config-py
    namespace: jupyterhub
  data:
    jupyterhub-config.py: |-
      import os

      c.JupyterHub.log_level = os.environ.get("JHUB_LOG_LEVEL", "DEBUG")
      c.JupyterHub.proxy_api_ip = "0.0.0.0"
      c.JupyterHub.hub_ip = "0.0.0.0"
      c.JupyterHub.extra_log_file = "/hub/jupyterhub.log"
      # allows admin to log in to user instances
      c.JupyterHub.admin_access = True
      c.Authenticator.admin_users = admin = set()
      admin.update(os.environ["ADMIN_USERS"].split(","))
      # c.Authenticator.whitelist = whitelist = set()
      # whitelist.update(os.environ["OAUTH_WHITELIST"].split(","))

      # Authentication
      c.JupyterHub.authenticator_class = "oauthenticator.EGICheckInOAuthenticator"
      c.EGICheckInOAuthenticator.client_id = os.environ.get("OAUTH_CLIENT_ID", "")
      c.EGICheckInOAuthenticator.client_secret = os.environ.get(
          "OAUTH_CLIENT_SECRET", "")
      c.EGICheckInOAuthenticator.oauth_callback_url = os.environ.get(
          "OAUTH_CALLBACK_URL", "")

      # Spawner Options
      c.JupyterHub.spawner_class = "kubespawner.KubeSpawner"
      c.JupyterHub.cleanup_servers = False

      c.KubeSpawner.start_timeout = 60 * 8

      c.KubeSpawner.debug = os.environ.get("JHUB_SPWN_DEBUG", "") == "TRUE"
      c.KubeSpawner.pod_name_template = "notebook-{userid}"
      c.KubeSpawner.hub_connect_ip = os.environ.get("KSPAWN_HUB_IP", None)
      c.KubeSpawner.namespace = "jupyterhub"
      c.KubeSpawner.singleuser_image_spec = os.environ.get("KUBESPAWN_IMAGE",
                                                           None)

      c.KubeSpawner.use_options_form = False
      #c.KubeSpawner.cpu_limit = os.environ.get("KUBESPAWN_CPU_LIMIT", None)
      #c.KubeSpawner.cpu_request = os.environ.get("KUBESPAWN_CPU_REQUEST", None)
      #c.KubeSpawner.mem_limit = os.environ.get("KUBESPAWN_MEM_LIMIT", None)
      #c.KubeSpawner.mem_request = os.environ.get("KUBESPAWN_MEM_REQUEST", None)
      c.KubeSpawner.create_user_volume_locally = True
      c.KubeSpawner.volumes = [
          # the notebook dir
          {
              "name": "{userid}-vol",
              "nfs": {"path": "/exports/{username}",
                      "server": os.environ.get("KUBESPAWN_NFS_SERVER")}
          },
      ]
      c.KubeSpawner.volume_mounts = [{"name": "{userid}-vol",
                                      "mountPath": "/notebooks"} ]
      c.KubeSpawner.singleuser_fs_gid = 5555
      c.KubeSpawner.notebook_dir = "/notebooks"
      c.KubeSpawner.http_timeout = 60 * 8
---
  apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    name: jupyterhub
    namespace: jupyterhub
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: hub
      spec:
        serviceAccountName: jupyterhub-account
        securityContext:
          fsGroup: 5555
        containers:
        - name: hub
          image: enolfc/jupyterhub:latest
          livenessProbe:
            exec:
              command: ["bash", "-c", "bash -c 'timeout -s 9 -k 10s 5s sed -n \"1w /mnt/jupyterhub/podhealth\" <<< \"$(date +%F_%H:%M:%S)\" && echo ok'"]
            initialDelaySeconds: 45
            timeoutSeconds: 2
            periodSeconds: 20
          ports:
          - containerPort: 8081
          - containerPort: 8000
          env:
          - name: KSPAWN_HUB_IP
            value: "jupyterhub-api.jupyterhub.svc.cluster.local"
          - name: JHUB_SPWN_DEBUG
            value: "TRUE"
          - name: JHUB_LOG_LEVEL
            value: DEBUG
          - name: KUBESPAWN_NFS_SERVER
            value: '147.228.242.34'
          - name: KUBESPAWN_IMAGE
            value: 'enolfc/notebook'
          - name: KUBESPAWN_CPU_LIMIT
            value: '3000'
          - name: KUBESPAWN_CPU_REQUEST
            value: '200'
          - name: KUBESPAWN_MEM_LIMIT
            value: '2G'
          - name: KUBESPAWN_MEM_REQUEST
            value: '256M'
          - name: OAUTH_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: jupyterhub
                key: oauth-client-id
          - name: OAUTH_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: jupyterhub
                key: oauth-client-secret
          - name: OAUTH_CALLBACK_URL
            valueFrom:
              secretKeyRef:
                name: jupyterhub
                key: oauth-callback-url
          resources:
            limits:
              cpu: 100m
              memory: 1000M
            requests:
              cpu: 100m
              memory: 1000M
          volumeMounts:
          - name: config-volume
            mountPath: "/srv/jupyterhub/"
          - name: shared-notebooks
            mountPath: /mnt/jupyterhub
        volumes:
        - name: config-volume
          configMap:
            name: jupyterhub-config-py
            items:
              - key: jupyterhub-config.py
                path: jupyterhub_config.py
        - name: shared-notebooks
          nfs:
            path: "/exports"
            server: "147.228.242.34"
---
  kind: Service
  apiVersion: v1
  metadata:
    name: jupyterhub-api
    namespace: jupyterhub
  spec:
    selector:
      app: hub
    ports:
      - protocol: TCP
        port: 8081
        targetPort: 8081
        name: api
---
  kind: Service
  apiVersion: v1
  metadata:
    name: jupyterhub-ui
    namespace: jupyterhub
  spec:
    type: NodePort
    selector:
      app: hub
    ports:
      - protocol: TCP
        port: 8000
        targetPort: 8000
        name: ui
        nodePort: 30000
